{"ast":null,"code":"import axios from \"axios\";\nconst baseUrl = \"http://localhost:8089/recycler/api\";\naxios.defaults.timeout = 100000;\naxios.defaults.baseURL = baseUrl;\naxios.interceptors.request.use(config => {\n  config.data = JSON.stringify(config.data);\n  config.headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nclass httpRequest {\n  async get(url) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new Promise((resolve, reject) => {\n      axios.get(url, params).then(response => {\n        resolve({\n          success: true,\n          data: response.data\n        });\n      }).catch(error => {\n        reject({\n          success: false,\n          data: error.data\n        });\n      });\n    }).catch(e => {\n      return {\n        success: false,\n        code: e.code,\n        message: e.code\n      };\n    });\n  }\n  async post(url) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new Promise((resolve, reject) => {\n      axios.post(url, params).then(response => {\n        console.log(response);\n        if (response.status === 200 && response.data.code === 1) {\n          resolve({\n            success: true,\n            data: response.data\n          });\n        } else {\n          reject({\n            success: false,\n            data: response.data.data,\n            message: response.data.message\n          });\n        }\n      }).catch(error => {\n        reject({\n          success: false,\n          data: null,\n          message: error.message\n        });\n      });\n      ;\n    }).catch(e => {\n      return e;\n    });\n  }\n}\nexport default new httpRequest();","map":{"version":3,"names":["axios","baseUrl","defaults","timeout","baseURL","interceptors","request","use","config","data","JSON","stringify","headers","error","Promise","reject","httpRequest","get","url","params","resolve","then","response","success","catch","e","code","message","post","console","log","status"],"sources":["D:/project/recycler/recycler-ui/src/js/request.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst baseUrl = \"http://localhost:8089/recycler/api\";\r\naxios.defaults.timeout = 100000;\r\naxios.defaults.baseURL = baseUrl;\r\naxios.interceptors.request.use(\r\n    (config) => {\r\n      config.data = JSON.stringify(config.data);\r\n      config.headers = {\r\n        \"Content-Type\": \"application/json\",\r\n      };\r\n      return config;\r\n    },\r\n    (error) => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\nclass httpRequest{\r\n    async get(url, params = {}) {\r\n        return new Promise((resolve, reject) => {\r\n          axios.get(url, params)\r\n          .then((response) => {\r\n            resolve({\r\n              success:true,\r\n              data:response.data\r\n            })\r\n            })\r\n            .catch((error) => {\r\n              reject({\r\n                success:false,\r\n                data:error.data\r\n              });\r\n            });\r\n        }).catch((e)=>{\r\n          return {\r\n            success:false,\r\n            code:e.code,\r\n            message:e.code\r\n          };\r\n        });\r\n      }\r\n      async post(url, params = {}) {\r\n        return new Promise((resolve, reject) => {\r\n          axios.post(url, params)\r\n          .then((response) => {\r\n            console.log(response);\r\n            if(response.status === 200 && response.data.code === 1){\r\n              resolve(\r\n                {\r\n                  success:true,\r\n                  data:response.data\r\n                }\r\n              );\r\n            }else{\r\n              reject(\r\n                {\r\n                  success:false,\r\n                  data:response.data.data,\r\n                  message:response.data.message\r\n                }\r\n              );\r\n            }\r\n          }\r\n          ).catch((error) => {\r\n            reject(\r\n              {\r\n                success:false,\r\n                data:null,\r\n                message:error.message\r\n              }\r\n            );\r\n          });;\r\n        }).catch((e)=>{\r\n          return e;\r\n        });\r\n      }\r\n}\r\nexport default new httpRequest();"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,oCAAoC;AACpDD,KAAK,CAACE,QAAQ,CAACC,OAAO,GAAG,MAAM;AAC/BH,KAAK,CAACE,QAAQ,CAACE,OAAO,GAAGH,OAAO;AAChCD,KAAK,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACVA,MAAM,CAACC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACH,MAAM,CAACC,IAAI,CAAC;EACzCD,MAAM,CAACI,OAAO,GAAG;IACf,cAAc,EAAE;EAClB,CAAC;EACD,OAAOJ,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CACF;AACH,MAAMG,WAAW;EACb,MAAMC,GAAG,CAACC,GAAG,EAAe;IAAA,IAAbC,MAAM,uEAAG,CAAC,CAAC;IACtB,OAAO,IAAIL,OAAO,CAAC,CAACM,OAAO,EAAEL,MAAM,KAAK;MACtCf,KAAK,CAACiB,GAAG,CAACC,GAAG,EAAEC,MAAM,CAAC,CACrBE,IAAI,CAAEC,QAAQ,IAAK;QAClBF,OAAO,CAAC;UACNG,OAAO,EAAC,IAAI;UACZd,IAAI,EAACa,QAAQ,CAACb;QAChB,CAAC,CAAC;MACF,CAAC,CAAC,CACDe,KAAK,CAAEX,KAAK,IAAK;QAChBE,MAAM,CAAC;UACLQ,OAAO,EAAC,KAAK;UACbd,IAAI,EAACI,KAAK,CAACJ;QACb,CAAC,CAAC;MACJ,CAAC,CAAC;IACN,CAAC,CAAC,CAACe,KAAK,CAAEC,CAAC,IAAG;MACZ,OAAO;QACLF,OAAO,EAAC,KAAK;QACbG,IAAI,EAACD,CAAC,CAACC,IAAI;QACXC,OAAO,EAACF,CAAC,CAACC;MACZ,CAAC;IACH,CAAC,CAAC;EACJ;EACA,MAAME,IAAI,CAACV,GAAG,EAAe;IAAA,IAAbC,MAAM,uEAAG,CAAC,CAAC;IACzB,OAAO,IAAIL,OAAO,CAAC,CAACM,OAAO,EAAEL,MAAM,KAAK;MACtCf,KAAK,CAAC4B,IAAI,CAACV,GAAG,EAAEC,MAAM,CAAC,CACtBE,IAAI,CAAEC,QAAQ,IAAK;QAClBO,OAAO,CAACC,GAAG,CAACR,QAAQ,CAAC;QACrB,IAAGA,QAAQ,CAACS,MAAM,KAAK,GAAG,IAAIT,QAAQ,CAACb,IAAI,CAACiB,IAAI,KAAK,CAAC,EAAC;UACrDN,OAAO,CACL;YACEG,OAAO,EAAC,IAAI;YACZd,IAAI,EAACa,QAAQ,CAACb;UAChB,CAAC,CACF;QACH,CAAC,MAAI;UACHM,MAAM,CACJ;YACEQ,OAAO,EAAC,KAAK;YACbd,IAAI,EAACa,QAAQ,CAACb,IAAI,CAACA,IAAI;YACvBkB,OAAO,EAACL,QAAQ,CAACb,IAAI,CAACkB;UACxB,CAAC,CACF;QACH;MACF,CAAC,CACA,CAACH,KAAK,CAAEX,KAAK,IAAK;QACjBE,MAAM,CACJ;UACEQ,OAAO,EAAC,KAAK;UACbd,IAAI,EAAC,IAAI;UACTkB,OAAO,EAACd,KAAK,CAACc;QAChB,CAAC,CACF;MACH,CAAC,CAAC;MAAC;IACL,CAAC,CAAC,CAACH,KAAK,CAAEC,CAAC,IAAG;MACZ,OAAOA,CAAC;IACV,CAAC,CAAC;EACJ;AACN;AACA,eAAe,IAAIT,WAAW,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}